// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.Commerce.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the facets the API determines for you.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DiscoveredFacets")]
    public partial class ResponseDiscoveredFacets : ResponseAggregation
    {
        /// <summary>
        /// Initializes a new instance of the ResponseDiscoveredFacets class.
        /// </summary>
        public ResponseDiscoveredFacets()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResponseDiscoveredFacets class.
        /// </summary>
        /// <param name="errors">A list of errors that happened to the task, if
        /// any.</param>
        /// <param name="name">The aggregation name as defined in the
        /// requset.</param>
        /// <param name="estimatedCount">An estimated count of items in this
        /// aggregation.</param>
        /// <param name="aggregations">The list of child aggregations, if
        /// any.</param>
        /// <param name="filter">The filter condition that facet discovery was
        /// limited to, satisfied by the top results.</param>
        public ResponseDiscoveredFacets(IList<ResponseError> errors = default(IList<ResponseError>), IList<ResponseDebugInfo> debug = default(IList<ResponseDebugInfo>), string name = default(string), long? estimatedCount = default(long?), IList<ResponseAggregation> aggregations = default(IList<ResponseAggregation>), ConditionBase filter = default(ConditionBase))
            : base(errors, debug, name, estimatedCount, aggregations)
        {
            Filter = filter;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the filter condition that facet discovery was limited
        /// to, satisfied by the top results.
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        public ConditionBase Filter { get; set; }

    }
}
