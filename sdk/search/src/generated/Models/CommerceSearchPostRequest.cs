// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.Commerce.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CommerceSearchPostRequest
    {
        /// <summary>
        /// Initializes a new instance of the CommerceSearchPostRequest class.
        /// </summary>
        public CommerceSearchPostRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CommerceSearchPostRequest class.
        /// </summary>
        /// <param name="market">The market where the results come from.
        /// Thypically, `mkt` is the country where the user is making the
        /// request from.</param>
        /// <param name="language">The language to use for user interface
        /// strings. You may specify the language using either a 2-letter or
        /// 4-letter code. Using 4-letter codes is preferred.</param>
        /// <param name="query">The query that determines the result set match
        /// criteria.</param>
        /// <param name="items">A description for how the items in the result
        /// set would look like.</param>
        /// <param name="searchInstanceId">A saved search instance
        /// configuration to apply to current request.</param>
        public CommerceSearchPostRequest(string market = default(string), RequestClient client = default(RequestClient), string language = default(string), RequestQuery query = default(RequestQuery), RequestItems items = default(RequestItems), IList<RequestAggregationBase> aggregations = default(IList<RequestAggregationBase>), bool? debug = default(bool?), string searchInstanceId = default(string))
        {
            Market = market;
            Client = client;
            Language = language;
            Query = query;
            Items = items;
            Aggregations = aggregations;
            Debug = debug;
            SearchInstanceId = searchInstanceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the market where the results come from. Thypically,
        /// `mkt` is the country where the user is making the request from.
        /// </summary>
        [JsonProperty(PropertyName = "market")]
        public string Market { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "client")]
        public RequestClient Client { get; set; }

        /// <summary>
        /// Gets or sets the language to use for user interface strings. You
        /// may specify the language using either a 2-letter or 4-letter code.
        /// Using 4-letter codes is preferred.
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the query that determines the result set match
        /// criteria.
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public RequestQuery Query { get; set; }

        /// <summary>
        /// Gets or sets a description for how the items in the result set
        /// would look like.
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public RequestItems Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregations")]
        public IList<RequestAggregationBase> Aggregations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "debug")]
        public bool? Debug { get; set; }

        /// <summary>
        /// Gets or sets a saved search instance configuration to apply to
        /// current request.
        /// </summary>
        [JsonProperty(PropertyName = "searchInstanceId")]
        public string SearchInstanceId { get; set; }

    }
}
