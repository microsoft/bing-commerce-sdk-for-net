// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.Commerce.Search.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ComparisonOperator.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ComparisonOperator
    {
        [EnumMember(Value = "Eq")]
        Eq,
        [EnumMember(Value = "Ne")]
        Ne,
        [EnumMember(Value = "Gt")]
        Gt,
        [EnumMember(Value = "Lt")]
        Lt,
        [EnumMember(Value = "Ge")]
        Ge,
        [EnumMember(Value = "Le")]
        Le
    }
    internal static class ComparisonOperatorEnumExtension
    {
        internal static string ToSerializedValue(this ComparisonOperator? value)
        {
            return value == null ? null : ((ComparisonOperator)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ComparisonOperator value)
        {
            switch( value )
            {
                case ComparisonOperator.Eq:
                    return "Eq";
                case ComparisonOperator.Ne:
                    return "Ne";
                case ComparisonOperator.Gt:
                    return "Gt";
                case ComparisonOperator.Lt:
                    return "Lt";
                case ComparisonOperator.Ge:
                    return "Ge";
                case ComparisonOperator.Le:
                    return "Le";
            }
            return null;
        }

        internal static ComparisonOperator? ParseComparisonOperator(this string value)
        {
            switch( value )
            {
                case "Eq":
                    return ComparisonOperator.Eq;
                case "Ne":
                    return ComparisonOperator.Ne;
                case "Gt":
                    return ComparisonOperator.Gt;
                case "Lt":
                    return ComparisonOperator.Lt;
                case "Ge":
                    return ComparisonOperator.Ge;
                case "Le":
                    return ComparisonOperator.Le;
            }
            return null;
        }
    }
}
