// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.Commerce.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a list of composite conditions for filtering and boosting.
    /// </summary>
    public partial class ConditionBlock : ConditionBase
    {
        /// <summary>
        /// Initializes a new instance of the ConditionBlock class.
        /// </summary>
        public ConditionBlock()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConditionBlock class.
        /// </summary>
        /// <param name="conditions">The set of operands.</param>
        /// <param name="operatorProperty">and, or. Default is `And`. Possible
        /// values include: 'And', 'Or'</param>
        public ConditionBlock(IList<ConditionBase> conditions = default(IList<ConditionBase>), LogicalOperator? operatorProperty = default(LogicalOperator?))
        {
            Conditions = conditions;
            OperatorProperty = operatorProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the set of operands.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<ConditionBase> Conditions { get; set; }

        /// <summary>
        /// Gets or sets and, or. Default is `And`. Possible values include:
        /// 'And', 'Or'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public LogicalOperator? OperatorProperty { get; set; }

    }
}
