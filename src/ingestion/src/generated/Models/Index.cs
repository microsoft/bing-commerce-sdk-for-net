// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.ECommerce.Ingestion.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Index
    {
        /// <summary>
        /// Initializes a new instance of the Index class.
        /// </summary>
        public Index()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Index class.
        /// </summary>
        /// <param name="searchScenario">Possible values include: 'Unknown',
        /// 'Retail', 'Document', 'Hotel'</param>
        public Index(string name = default(string), string description = default(string), IList<Region?> regions = default(IList<Region?>), string searchScenario = default(string), IList<string> searchServices = default(IList<string>), string schemaVersion = default(string), IList<IndexField> fields = default(IList<IndexField>))
        {
            Name = name;
            Description = description;
            Regions = regions;
            SearchScenario = searchScenario;
            SearchServices = searchServices;
            SchemaVersion = schemaVersion;
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regions")]
        public IList<Region?> Regions { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Retail',
        /// 'Document', 'Hotel'
        /// </summary>
        [JsonProperty(PropertyName = "searchScenario")]
        public string SearchScenario { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchServices")]
        public IList<string> SearchServices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schemaVersion")]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IList<IndexField> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Regions != null)
            {
                if (Regions.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Regions)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Regions");
                }
            }
        }
    }
}
