// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.ECommerce.Ingestion
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BingECommerceIngestion.
    /// </summary>
    public static partial class BingECommerceIngestionExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexResponse> CreateIndexAsync(this IBingECommerceIngestion operations, string tenantid, string subscriptionId = default(string), Index body = default(Index), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIndexWithHttpMessagesAsync(tenantid, subscriptionId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexResponse> GetAllIndexesAsync(this IBingECommerceIngestion operations, string tenantid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllIndexesWithHttpMessagesAsync(tenantid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexResponse> DeleteIndexAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteIndexWithHttpMessagesAsync(tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexResponse> UpdateIndexAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), Index body = default(Index), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateIndexWithHttpMessagesAsync(tenantid, indexid, subscriptionId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexResponse> GetIndexAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndexWithHttpMessagesAsync(tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IndexStatusResponse> GetIndexStatusAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndexStatusWithHttpMessagesAsync(tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='notransform'>
            /// </param>
            /// <param name='updateid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushDataUpdateResponse> PushDataUpdateAsync(this IBingECommerceIngestion operations, string body, string tenantid, string indexid, string subscriptionId = default(string), bool? notransform = default(bool?), string updateid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PushDataUpdateWithHttpMessagesAsync(body, tenantid, indexid, subscriptionId, notransform, updateid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='updateid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushUpdateStatusResponse> PushDataStatusAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string updateid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PushDataStatusWithHttpMessagesAsync(tenantid, indexid, updateid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformationConfigResponse> DeleteTransformationConfigAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTransformationConfigWithHttpMessagesAsync(tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformationConfigResponse> CreateOrUpdateTransformationConfigAsync(this IBingECommerceIngestion operations, string body, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateTransformationConfigWithHttpMessagesAsync(body, tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantid'>
            /// </param>
            /// <param name='indexid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformationConfigResponse> GetTransformationConfigAsync(this IBingECommerceIngestion operations, string tenantid, string indexid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransformationConfigWithHttpMessagesAsync(tenantid, indexid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformationConfigResponse> UploadTryOutConfigAsync(this IBingECommerceIngestion operations, string body, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadTryOutConfigWithHttpMessagesAsync(body, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tryoutid'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransformationTryoutResponse> ExecuteTryOutConfigAsync(this IBingECommerceIngestion operations, string tryoutid, string subscriptionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteTryOutConfigWithHttpMessagesAsync(tryoutid, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='format'>
            /// Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchemaDetectionResponse> DetectSchemaAsync(this IBingECommerceIngestion operations, string subscriptionId = default(string), string format = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetectSchemaWithHttpMessagesAsync(subscriptionId, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
