// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bing.Commerce.Search.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines an inclusion condition for a category field. It can appear in a
    /// filter, a boost, or a filter aggregation.
    /// </summary>
    public partial class CategoryCondition : FieldConditionBase
    {
        /// <summary>
        /// Initializes a new instance of the CategoryCondition class.
        /// </summary>
        public CategoryCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CategoryCondition class.
        /// </summary>
        /// <param name="field">The name of the field.</param>
        /// <param name="value">The category to match items against. The format
        /// for specifying hierarchical categories is a pipe-delimited string,
        /// such as `Meanswear|shirts|Dress Shirts`.</param>
        /// <param name="operatorProperty">The category operator to apply.
        /// Default is `In`. Possible values include: 'In', 'NotIn'</param>
        public CategoryCondition(string field = default(string), string value = default(string), CategoryOperator? operatorProperty = default(CategoryOperator?))
            : base(field)
        {
            Value = value;
            OperatorProperty = operatorProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the category to match items against. The format for
        /// specifying hierarchical categories is a pipe-delimited string, such
        /// as `Meanswear|shirts|Dress Shirts`.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the category operator to apply. Default is `In`.
        /// Possible values include: 'In', 'NotIn'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public CategoryOperator? OperatorProperty { get; set; }

    }
}
